name: Validate Primer
on: 
  push:
    branches: ["main", "release*"]
    tags: ["*"]
  pull_request:
    branches: ["main", "release*"]
  schedule:
    - cron: "15 4 * * *"  # 4:15 every day

env:
  GO_VERSION: "1.16"
  KIND_VERSION: "0.9.0"
  GO111MODULE: "on"
  OPERATOR_IMAGE: "quay.io/octo-emerging/gitops-primer"
  BUNDLE_IMAGE: "quay.io/octo-emerging/gitops-primer-bundle"
  EXPORT_IMAGE: "quay.io/octo-emerging/gitops-primer-export"
  DOWNLOADER_IMAGE: "quay.io/octo-emerging/gitops-primer-downloader"
  TAG: v0.0.1


jobs:
  build-crane:
    name: Build-crane
    runs-on: ubuntu-18.04
    steps:
      - name: Install Go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build crane
        run: |
          git clone https://github.com/konveyor/crane.git
          cd crane
          go build .

      - name: Save artifacts
        uses: actions/upload-artifact@v1
        with:
          name: crane
          path: crane/crane

  build-plugins:
    name: Build-plugins
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Create binaries
        run: make build-plugins

      - name: Save artifacts
        uses: actions/upload-artifact@v1
        with:
          name: plugins
          path: /home/runner/go/bin/

  build-operator:
    name: Build-operator
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Test
        run: make test

      - name: Build operator container
        run: make docker-build IMG=${OPERATOR_IMAGE}

      - name: Export container image
        run: docker save -o /tmp/operator.tar ${OPERATOR_IMAGE}

      - name: Save container as artifact
        uses: actions/upload-artifact@v1
        with:
          name: primer-operator
          path: /tmp/operator.tar

  build-bundle:
    name: Build-Bundle
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build bundle
        run: make bundle-build

      - name: Export container image
        run: docker save -o /tmp/bundle.tar ${BUNDLE_IMAGE}

      - name: Save container as artifact
        uses: actions/upload-artifact@v1
        with:
          name: primer-bundle
          path: /tmp/bundle.tar

  build-export:
    name: Build-export
    needs: [build-crane, build-plugins]
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: create transform-plugin dir
        run: mkdir export/transform-plugins

      - name: Load binary artifact
        uses: actions/download-artifact@v1
        with:
          name: plugins
          path: export/transform-plugins/

      - name: Load crane artifact
        uses: actions/download-artifact@v1
        with:
          name: crane
          path: export/

      - name: Build export container
        run: make -C export image

      - name: Export container image
        run: docker save -o /tmp/export.tar ${EXPORT_IMAGE}

      - name: Save container as artifact
        uses: actions/upload-artifact@v1
        with:
          name: export-image
          path: /tmp/export.tar

  build-downloader:
    name: Build-downloader
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Build downloader image
        run: make -C downloader image

      - name: Export container image
        run: docker save -o /tmp/downloader.tar ${DOWNLOADER_IMAGE}

      - name: Save container as artifact
        uses: actions/upload-artifact@v1
        with:
          name: primer-downloader
          path: /tmp/downloader.tar

  e2e:
    name: End-to-end
    needs: [build-operator, build-export, build-plugins, build-downloader]
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        KUBERNETES_VERSIONS: ["1.20.2"]
    env:
      KUBECONFIG: /tmp/kubeconfig
      KUBERNETES_VERSION: ${{ matrix.KUBERNETES_VERSIONS }}
      KIND_VERSION: "0.11.0"
    steps:
      - name: Get kind
        run: |
          curl -L -o kind https://github.com/kubernetes-sigs/kind/releases/download/v${KIND_VERSION}/kind-linux-amd64
          sudo install ./kind /usr/local/bin && rm kind

      - name: Create k8s Kind Cluster
        run: kind create cluster --kubeconfig /tmp/kubeconfig

      - name: Checkout source
        uses: actions/checkout@v2

      - name: Load operator container artifact
        uses: actions/download-artifact@v1
        with:
          name: primer-operator
          path: /tmp

      - name: Import container image into cluster
        run: |
          docker load -i /tmp/operator.tar
          docker inspect ${OPERATOR_IMAGE}
          docker history ${OPERATOR_IMAGE}
          kind load docker-image "${OPERATOR_IMAGE}"
          sleep 10
          kind load docker-image "${OPERATOR_IMAGE}"


      - name: Load export container artifact
        uses: actions/download-artifact@v1
        with:
          name: export-image
          path: /tmp

      - name: Import container image into cluster
        run: |
          docker load -i /tmp/export.tar
          docker inspect ${EXPORT_IMAGE}
          docker history ${EXPORT_IMAGE}
          kind load docker-image "${EXPORT_IMAGE}:latest"
          sleep 10
          kind load docker-image "${EXPORT_IMAGE}:latest"

      - name: Load export container artifact
        uses: actions/download-artifact@v1
        with:
          name: primer-downloader
          path: /tmp

      - name: Import container image into cluster
        run: |
          docker load -i /tmp/downloader.tar
          docker inspect ${DOWNLOADER_IMAGE}
          docker history ${DOWNLOADER_IMAGE}
          kind load docker-image "${DOWNLOADER_IMAGE}:latest"
          sleep 10
          kind load docker-image "${DOWNLOADER_IMAGE}:latest"

      - name: Start operator
        run: |
          make deploy

      - name: hack
        run: |
          kubectl create ns test
          echo "${{ secrets.KEY }}" > /tmp/file 
          kubectl create secret generic secret-key --from-file=id_rsa=/tmp/file -n test

      - name: Run e2e test
        run: |
          make test-e2e

  e2e-success:
    name: Successful e2e tests
    needs: [build-operator, e2e]
    runs-on: ubuntu-20.04
    steps:
      - name: Success
        run: echo "Previous steps were successful"

  push-operator:
    name: Push operator container to registry
    needs: e2e-success
    if: >
      (github.event_name == 'push' || github.event_name == 'schedule') &&
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-20.04

    steps:
      - name: Load container artifact
        uses: actions/download-artifact@v1
        with:
          name: primer-operator
          path: /tmp

      - name: Import container image
        run: |
          docker load -i /tmp/operator.tar
          docker inspect ${OPERATOR_IMAGE}
      - name: Login to registry
        # If the registry server is specified in the image name, we use that.
        # If the server isn't in the image name, default to docker.io
        run: |
          [[ "${OPERATOR_IMAGE}" =~ ^([^/]+)/[^/]+/[^/]+ ]] && REGISTRY="${BASH_REMATCH[1]}" || REGISTRY="docker.io"
          echo "Attempting docker login to: ${REGISTRY}"
          echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin ${REGISTRY}
      - name: Push to registry (latest)
        if: >
          (github.event_name == 'push' || github.event_name == 'schedule') &&
          github.ref == 'refs/heads/main'
        run: |
          docker push "${OPERATOR_IMAGE}"
      - name: Push to registry (version tag)
        if: >
          (github.event_name == 'push' || github.event_name == 'schedule') &&
          startsWith(github.ref, 'refs/tags/v')
        run: |
          [[ "${{ github.ref }}" =~ ^refs/tags/v([0-9]+\..*) ]] || exit 0
          TAG="${BASH_REMATCH[1]}"
          echo "Pushing to $TAG"
          docker tag "${OPERATOR_IMAGE}" "${OPERATOR_IMAGE}:${TAG}"
          docker push "${OPERATOR_IMAGE}:${TAG}"

  push-export:
    name: Push export container to registry
    needs: e2e-success
    if: >
      (github.event_name == 'push' || github.event_name == 'schedule') &&
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-20.04

    steps:
      - name: Load container artifact
        uses: actions/download-artifact@v1
        with:
          name: export-image
          path: /tmp

      - name: Import container image
        run: |
          docker load -i /tmp/export.tar
          docker inspect ${EXPORT_IMAGE}
      - name: Login to registry
        # If the registry server is specified in the image name, we use that.
        # If the server isn't in the image name, default to docker.io
        run: |
          [[ "${EXPORT_IMAGE}" =~ ^([^/]+)/[^/]+/[^/]+ ]] && REGISTRY="${BASH_REMATCH[1]}" || REGISTRY="docker.io"
          echo "Attempting docker login to: ${REGISTRY}"
          echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin ${REGISTRY}
      - name: Push to registry (latest)
        if: >
          (github.event_name == 'push' || github.event_name == 'schedule') &&
          github.ref == 'refs/heads/main'
        run: |
          docker push "${EXPORT_IMAGE}"
      - name: Push to registry (version tag)
        if: >
          (github.event_name == 'push' || github.event_name == 'schedule') &&
          startsWith(github.ref, 'refs/tags/v')
        run: |
          [[ "${{ github.ref }}" =~ ^refs/tags/v([0-9]+\..*) ]] || exit 0
          TAG="${BASH_REMATCH[1]}"
          echo "Pushing to $TAG"
          docker tag "${EXPORT_IMAGE}" "${EXPORT_IMAGE}:${TAG}"
          docker push "${EXPORT_IMAGE}:${TAG}"

  push-bundle:
    name: Push bundle container to registry
    needs: e2e-success
    if: >
      (github.event_name == 'push' || github.event_name == 'schedule') &&
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-20.04

    steps:
      - name: Load container artifact
        uses: actions/download-artifact@v1
        with:
          name: primer-bundle
          path: /tmp

      - name: Import container image
        run: |
          docker load -i /tmp/bundle.tar
          docker inspect ${BUNDLE_IMAGE}:${TAG}
          
      - name: Login to registry
        # If the registry server is specified in the image name, we use that.
        # If the server isn't in the image name, default to docker.io
        run: |
          [[ "${BUNDLE_IMAGE}" =~ ^([^/]+)/[^/]+/[^/]+ ]] && REGISTRY="${BASH_REMATCH[1]}" || REGISTRY="docker.io"
          echo "Attempting docker login to: ${REGISTRY}"
          echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin ${REGISTRY}
          
      - name: Push to registry (version tag)
        if: >
          (github.event_name == 'push' || github.event_name == 'schedule') &&
          github.ref == 'refs/heads/main'
        run: |
          [[ "${{ github.ref }}" =~ ^refs/tags/v([0-9]+\..*) ]] || exit 0
          TAG="${BASH_REMATCH[1]}"
          echo "Pushing to $TAG"
          docker push "${BUNDLE_IMAGE}:${TAG}"

  push-downloader:
    name: Push downloader image to registry
    needs: e2e-success
    if: >
      (github.event_name == 'push' || github.event_name == 'schedule') &&
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-20.04

    steps:
      - name: Load container artifact
        uses: actions/download-artifact@v1
        with:
          name: primer-downloader
          path: /tmp

      - name: Import container image
        run: |
          docker load -i /tmp/downloader.tar
          docker inspect ${DOWNLOADER_IMAGE}
          
          [[ "${DOWNLOADER_IMAGE}" =~ ^([^/]+)/[^/]+/[^/]+ ]] && REGISTRY="${BASH_REMATCH[1]}" || REGISTRY="docker.io"
          echo "Attempting docker login to: ${REGISTRY}"
          echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin ${REGISTRY}
      - name: Push to registry (latest)
        if: >
          (github.event_name == 'push' || github.event_name == 'schedule') &&
          github.ref == 'refs/heads/main'
        run: |
          docker push "${DOWNLOADER_IMAGE}"
      - name: Push to registry (version tag)
        if: >
          (github.event_name == 'push' || github.event_name == 'schedule') &&
          startsWith(github.ref, 'refs/tags/v')
        run: |
          [[ "${{ github.ref }}" =~ ^refs/tags/v([0-9]+\..*) ]] || exit 0
          TAG="${BASH_REMATCH[1]}"
          echo "Pushing to $TAG"
          docker tag "${DOWNLOADER_IMAGE}" "${DOWNLOADER_IMAGE}:${TAG}"
          docker push "${DOWNLOADER_IMAGE}:${TAG}"
