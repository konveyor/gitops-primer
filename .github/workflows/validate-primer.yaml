name: Validate Primer
on: 
  push:
    branches: ["main", "release*"]
    tags: ["*"]
  pull_request:
    branches: ["main", "release*"]
  schedule:
    - cron: "15 4 * * 1"  # 4:15 every Monday

env:
  GO_VERSION: "1.16"
  KIND_VERSION: "0.9.0"
  GO111MODULE: "on"
  OPERATOR_IMAGE: "quay.io/octo-emerging/gitops-primer"
  EXTRACT_IMAGE: "quay.io/octo-emerging/gitops-primer-extract"


jobs:
  build-crane:
    name: Build-crane
    runs-on: ubuntu-20.04
    steps:
      - name: Install Go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build crane
        run: |
          git clone https://github.com/sseago/crane.git
          cd crane
          git checkout transform-cmd
          curl -o cmd/apply/apply.go https://raw.githubusercontent.com/konveyor/crane/e3f60737303385de1235cba489f4f248fe3aa5a2/cmd/apply/apply.go
          /usr/local/bin/go/bin/go build .

      - name: Save artifacts
        uses: actions/upload-artifact@v1
        with:
          name: crane
          path: crane/crane

  build-plugins:
    name: Build-plugins
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Create binaries
        run: make build-plugins

      - name: Save artifacts
        uses: actions/upload-artifact@v1
        with:
          name: plugins
          path: /home/runner/go/bin/

  build-operator:
    name: Build-operator
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Test
        run: make test

      - name: Build operator container
        run: make docker-build IMG=${OPERATOR_IMAGE}

      - name: Export container image
        run: docker save -o /tmp/image.tar ${OPERATOR_IMAGE}

      - name: Save container as artifact
        uses: actions/upload-artifact@v1
        with:
          name: primer-operator
          path: /tmp/image.tar

  build-extract:
    name: Build-extract
    needs: [build-plugins]
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: create transform-plugin dir
        run: mkdir extract/transform-plugins

      - name: Load binary artifact
        uses: actions/download-artifact@v1
        with:
          name: plugins
          path: extract/transform-plugins/

      - name: Build operator container
        run: make -C extract image

      - name: Export container image
        run: docker save -o /tmp/image.tar ${EXTRACT_IMAGE}

      - name: Save container as artifact
        uses: actions/upload-artifact@v1
        with:
          name: extract-image
          path: /tmp/image.tar

  e2e:
    name: End-to-end
    needs: [build-operator, build-extract, build-plugins]
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        KUBERNETES_VERSIONS: ["1.20.2"]
    env:
      KUBECONFIG: /tmp/kubeconfig
      KUBERNETES_VERSION: ${{ matrix.KUBERNETES_VERSIONS }}
    steps:
      - name: Create k8s Kind Cluster
        uses: engineerd/setup-kind@v0.5.0

      - name: Checkout source
        uses: actions/checkout@v2

      - name: Load operator container artifact
        uses: actions/download-artifact@v1
        with:
          name: primer-operator
          path: /tmp

      - name: Import container image into cluster
        run: |
          docker load -i /tmp/image.tar
          docker inspect ${OPERATOR_IMAGE}
          docker tag ${OPERATOR_IMAGE} ${OPERATOR_IMAGE}:ci-build
          kind load docker-image "${OPERATOR_IMAGE}:ci-build"

      - name: Load extract container artifact
        uses: actions/download-artifact@v1
        with:
          name: extract-image
          path: /tmp

      - name: Import container image into cluster
        run: |
          docker load -i /tmp/image.tar
          docker inspect ${EXTRACT_IMAGE}
          docker tag ${EXTRACT_IMAGE} ${EXTRACT_IMAGE}:ci-build
          kind load docker-image "${EXTRACT_IMAGE}:ci-build"

      - name: Start operator
        run: |
          make deploy

      - name: hack
        run: |
          kubectl create ns test
          echo "${{ secrets.KEY }}" > /tmp/file 
          kubectl create secret generic secret-key --from-file=id_rsa=/tmp/file -n test

      - name: Run e2e test
        run: |
          make test-e2e

  e2e-success:
    name: Successful e2e tests
    needs: [build-operator, e2e]
    runs-on: ubuntu-20.04
    steps:
      - name: Success
        run: echo "Previous steps were successful"

  push-operator:
    name: Push operator container to registry
    needs: e2e-success
    if: >
      (github.event_name == 'push' || github.event_name == 'schedule') &&
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-20.04

    steps:
      - name: Load container artifact
        uses: actions/download-artifact@v1
        with:
          name: primer-operator
          path: /tmp

      - name: Import container image
        run: |
          docker load -i /tmp/image.tar
          docker inspect ${OPERATOR_IMAGE}
      - name: Login to registry
        # If the registry server is specified in the image name, we use that.
        # If the server isn't in the image name, default to docker.io
        run: |
          [[ "${OPERATOR_IMAGE}" =~ ^([^/]+)/[^/]+/[^/]+ ]] && REGISTRY="${BASH_REMATCH[1]}" || REGISTRY="docker.io"
          echo "Attempting docker login to: ${REGISTRY}"
          echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin ${REGISTRY}
      - name: Push to registry (latest)
        if: >
          (github.event_name == 'push' || github.event_name == 'schedule') &&
          github.ref == 'refs/heads/main'
        run: |
          docker push "${OPERATOR_IMAGE}"
      - name: Push to registry (version tag)
        if: >
          (github.event_name == 'push' || github.event_name == 'schedule') &&
          startsWith(github.ref, 'refs/tags/v')
        run: |
          [[ "${{ github.ref }}" =~ ^refs/tags/v([0-9]+\..*) ]] || exit 0
          TAG="${BASH_REMATCH[1]}"
          echo "Pushing to $TAG"
          docker tag "${OPERATOR_IMAGE}" "${OPERATOR_IMAGE}:${TAG}"
          docker push "${OPERATOR_IMAGE}:${TAG}"

  push-extract:
    name: Push extract container to registry
    needs: e2e-success
    if: >
      (github.event_name == 'push' || github.event_name == 'schedule') &&
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-20.04

    steps:
      - name: Load container artifact
        uses: actions/download-artifact@v1
        with:
          name: extract-image
          path: /tmp

      - name: Import container image
        run: |
          docker load -i /tmp/image.tar
          docker inspect ${EXTRACT_IMAGE}
      - name: Login to registry
        # If the registry server is specified in the image name, we use that.
        # If the server isn't in the image name, default to docker.io
        run: |
          [[ "${EXTRACT_IMAGE}" =~ ^([^/]+)/[^/]+/[^/]+ ]] && REGISTRY="${BASH_REMATCH[1]}" || REGISTRY="docker.io"
          echo "Attempting docker login to: ${REGISTRY}"
          echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin ${REGISTRY}
      - name: Push to registry (latest)
        if: >
          (github.event_name == 'push' || github.event_name == 'schedule') &&
          github.ref == 'refs/heads/main'
        run: |
          docker push "${EXTRACT_IMAGE}"
      - name: Push to registry (version tag)
        if: >
          (github.event_name == 'push' || github.event_name == 'schedule') &&
          startsWith(github.ref, 'refs/tags/v')
        run: |
          [[ "${{ github.ref }}" =~ ^refs/tags/v([0-9]+\..*) ]] || exit 0
          TAG="${BASH_REMATCH[1]}"
          echo "Pushing to $TAG"
          docker tag "${EXTRACT_IMAGE}" "${EXTRACT_IMAGE}:${TAG}"
          docker push "${EXTRACT_IMAGE}:${TAG}"

